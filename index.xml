<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSE 291</title>
    <link>https://cseweb.ucsd.edu/~dstefan/cse291-fall16/</link>
    <description>Recent content on CSE 291</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>deian&#43;cse291@cs.ucsd.edu (Deian Stefan)</managingEditor>
    <webMaster>deian&#43;cse291@cs.ucsd.edu (Deian Stefan)</webMaster>
    <lastBuildDate>Fri, 23 Sep 2016 01:37:21 -0700</lastBuildDate>
    <atom:link href="https://cseweb.ucsd.edu/~dstefan/cse291-fall16/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Confused deputy</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse291-fall16/notes/confused-deputy/</link>
      <pubDate>Fri, 23 Sep 2016 01:37:21 -0700</pubDate>
      <author>deian&#43;cse291@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse291-fall16/notes/confused-deputy/</guid>
      <description>

&lt;h4 id=&#34;what-is-the-scenario-that-the-paper-is-describing&#34;&gt;What is the scenario that the paper is describing?&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;(SYSX)FORT&lt;/code&gt; is a fortran compiler, that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Needs to write stats to (SYSX)STAT&lt;/li&gt;
&lt;li&gt;Allows user to provide filename where debugging output is written to at run
time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In order to do (1) the compiler is given the &lt;em&gt;home files license&lt;/em&gt;. This allows
the compiler to write files in its home directory.&lt;/p&gt;

&lt;h4 id=&#34;to-protect-files-the-system-was-using-access-control-lists-whare-are-acls&#34;&gt;To protect files the system was using access control lists. Whare are ACLs?&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Lists associated with objects (files) that specify the subjects that are
allowed to access the objects (and how).&lt;/li&gt;
&lt;li&gt;Processes run on behalf of subjects. When accessing object system checks
if the object ACL permits the subject to access it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;what-s-the-concrete-problem-they-ran-into&#34;&gt;What&amp;rsquo;s the concrete problem they ran into?&lt;/h4&gt;

&lt;p&gt;Billing info is stored in the home directory. So user can provide billing
filename to compiler and trash the directory with debugging info.&lt;/p&gt;

&lt;h4 id=&#34;what-s-the-underlying-problem&#34;&gt;What&amp;rsquo;s the underlying problem?&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Authority to write to stats file was used to writte debugging output.&lt;/li&gt;
&lt;li&gt;If, instead, the ivoking user&amp;rsquo;s authority was used to write the debugging
output instead, there would be no problem.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is called the confused deputy problem. The fortran compiler was confused
into using the authority for one purpose towards another goal.&lt;/p&gt;

&lt;h4 id=&#34;can-t-we-just-set-the-right-acls&#34;&gt;Can&amp;rsquo;t we just set the right ACLs?&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;No, this get super complicated. It sometimes breaks secure programs (too
restricting). Other times it&amp;rsquo;s insecure (not restricting enough).&lt;/li&gt;
&lt;li&gt;They had to write requirements as long boolean formulae.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;what-is-the-switching-hat-idea-why-didn-t-it-work&#34;&gt;What is the switching hat idea? Why didn&amp;rsquo;t it work?&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Syscall that allowed switching mode from one authority to another.&lt;/li&gt;
&lt;li&gt;Didn&amp;rsquo;t generalize beyond file system or two authorities.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Is this fundamental or mode a limitation of their exploration? Can you think of
a way of making the &amp;ldquo;swtching hats&amp;rdquo; idea work if you can modify the programming
language and have more than 1 single syscall change at your disposal.&lt;/p&gt;

&lt;h4 id=&#34;what-are-capabilities-and-how-do-they-solve-this-problem&#34;&gt;What are capabilities and how do they solve this problem?&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A capability tells you which file to access and gives you the authority to do
so. It removes the disconnect between naming and authority.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;With capabilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The system gives the compiler the capability to the stats file.&lt;/li&gt;
&lt;li&gt;When invoking the compiler, the user must give the compiler the capabililty
to the debugging file. If the user has this capablity, we know that they
can write to the file. So the compiler can write to it too. Importantly, it
cannot be confused into writing to the billing file since it doesn&amp;rsquo;t have
the capablity (name+authority) to this file. Something must grant it this
capability.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;capabilities-can-help-the-with-trojan-horses-problem-what-is-this-and-how-do-capabilties-help&#34;&gt;Capabilities can help the with &lt;em&gt;Trojan horses&lt;/em&gt; problem; what is this? And how do capabilties help?&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Call program to do one thing and it does something else.&lt;/li&gt;
&lt;li&gt;Capabilities help by limiting what the program can do. Only give program
least authority it needs. Consequence: &amp;ldquo;principle of least surprise&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;capabilities-can-help-the-with-the-mutually-suspicious-users-problem-what-is-this-and-how-do-capabilities-help&#34;&gt;Capabilities can help the with the &lt;em&gt;mutually suspicious users problem&lt;/em&gt;; what is this? And how do capabilities help?&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Common scenario: Alice has sensitive data (taxes) and wisher to run Bob&amp;rsquo;s
accounting program. Bob doesn&amp;rsquo;t want to share his super secret algorithm.&lt;/li&gt;
&lt;li&gt;Can run program with no capabilities other than the ones you grant it. This
ensures that if you don&amp;rsquo;t give it capability to talk to network, it can&amp;rsquo;t do
so.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;ll see how information flow control helps address this problem and what the
different trade offs are.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shill questions</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse291-fall16/assignments/shill/</link>
      <pubDate>Fri, 23 Sep 2016 01:37:21 -0700</pubDate>
      <author>deian&#43;cse291@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse291-fall16/assignments/shill/</guid>
      <description>&lt;p&gt;In addition to the paper summary, please answer these two questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Why does Shill rely on contracts? Are capabilities not enough?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Why are capability-sandboxed processes (not Shill scripts) vulnerable to the
confused deputy problem?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You may find the &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/notes/confused-deputy/&#34;&gt;notes from last week&amp;rsquo;s class&lt;/a&gt;
  useful if you missed the first class.&lt;/p&gt;

&lt;p&gt;Please sign up for &lt;a href=&#34;https://piazza.com/ucsd/fall2016/cse291&#34;&gt;Piazza&lt;/a&gt; if you
haven&amp;rsquo;t done so already and use the GitHub classroom link (see relevant post on
Piazza) to sign up for a private repository to which you will post your writing
assignment.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Course organization</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse291-fall16/about/</link>
      <pubDate>Mon, 05 Sep 2016 20:19:41 -0700</pubDate>
      <author>deian&#43;cse291@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse291-fall16/about/</guid>
      <description>

&lt;p&gt;The course consists of lectures, readings, pre-lecture questions, and a
project.  Most of the work in this course consists of reading journal and
conference papers. We will cover one paper for each class meeting.  Active
discussion will give you a non-trivial understanding of the material. The final
project will give you an opportunity to explore a topic more deeply.&lt;/p&gt;

&lt;h4 id=&#34;grading&#34;&gt;Grading&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;30% Paper summaries and reading questions&lt;/li&gt;
&lt;li&gt;25% Class participation&lt;/li&gt;
&lt;li&gt;45% Final project (including presentation and write-up)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;paper-summaries-and-reading-questions&#34;&gt;Paper summaries and reading questions&lt;/h4&gt;

&lt;p&gt;Prior to each lecture, please summarize each reading into 1-2 paragraphs.  With
some exceptions, each paper will also be accompanied with (one to two)
questions that you are required to respond to. The questions will be posted on
the reading list in the syllabus at least one day prior to the lecture devoted
to that paper.  Responses should be short and pithy. Our goal is to get you to
think deeply about the paper, not to test you. You wonâ€™t be graded on the
correctness of your answer but simply on whether you attempted to answer the
question at all.&lt;/p&gt;

&lt;h4 id=&#34;class-participation&#34;&gt;Class participation&lt;/h4&gt;

&lt;p&gt;Each student is expected to lead the discussion for (at least) one paper.
Beyond this, we evaluate class participation largely by observing how prepared
students are to discuss the covered paper when they come to class.  This is not
a trivial requirement because we expect papers to have been read thoroughly
prior to lecture.  Your paper summary and response to reading questions are a
good opportunity to show that you understood the paper well.&lt;/p&gt;

&lt;h4 id=&#34;final-project&#34;&gt;Final project&lt;/h4&gt;

&lt;p&gt;In groups of 2-3, students are expected to work on a final project.  The goal
of the project is to do original research on a security problem, (hopefully)
using techniques explored in this course.  At the end of the quarter, you are
expected to give a short presentation and write a short conference-style paper
on the project.&lt;/p&gt;

&lt;p&gt;We will have a list of project ideas shortly after the course starts, but
students are also encouraged to come up with their own ideas. If you are
already working on a research project that fits the theme of this course,
please feel free to use this as your final project (but indicate that you are
doing so).&lt;/p&gt;

&lt;h4 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h4&gt;

&lt;p&gt;The organization of this course was inspired by the Stanford &lt;a
href=&#34;https://cs240.stanford.edu&#34;&gt;CS 240&lt;/a&gt; course. (Thanks to Dawson Engler,
Sergio Benitez, and David MaziÃ¨res!)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Syllabus</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse291-fall16/syllabus/</link>
      <pubDate>Mon, 05 Sep 2016 20:19:41 -0700</pubDate>
      <author>deian&#43;cse291@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse291-fall16/syllabus/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/css/bootstrap-table.css&#34;&gt;

&lt;table class=&#34;table table-hover&#34;&gt;
  &lt;thead&gt;
  &lt;tr&gt;
    &lt;th&gt;Date&lt;/th&gt;
    &lt;th&gt;Topic&lt;/th&gt;
    &lt;th&gt;Lead&lt;/th&gt;
  &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tr&gt;
    &lt;th class=&#34;date&#34;&gt;Sept 22&lt;/th&gt;
    &lt;td&gt;
      &lt;div class=&#34;class-topic&#34;&gt;Overview and introduction&lt;/div&gt;
      &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/confused-deputy.pdf&#34;&gt;Confused deputy&lt;/a&gt;
      [
      &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/slides/lecture1.pdf&#34;&gt;slides&lt;/a&gt;,
      &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/notes/confused-deputy/&#34;&gt;notes&lt;/a&gt;
      ]
    &lt;/td&gt;
    &lt;td&gt;
      Deian
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td colspan=&#34;3&#34; class=&#34;topic&#34;&gt;A sample of language-based techniques&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&#34;date&#34;&gt;Sept 27&lt;/th&gt;
    &lt;td&gt;
      &lt;div class=&#34;class-topic&#34;&gt;Contracts and object capabilities&lt;/div&gt;
      &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/shill.pdf&#34;&gt;Shill&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&#34;date&#34;&gt;Sept 29&lt;/th&gt;
    &lt;td&gt;
      &lt;div class=&#34;class-topic&#34;&gt;Type systems for information flow control&lt;/div&gt;
      &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/jif.pdf&#34;&gt;JIF&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&#34;date&#34;&gt;Oct 04&lt;/th&gt;
    &lt;td&gt;
      &lt;div class=&#34;class-topic&#34;&gt;Runtime monitors for information flow control&lt;/div&gt;
      &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/lio.pdf&#34;&gt;LIO&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td colspan=&#34;3&#34; class=&#34;topic&#34;&gt;Server-side web security&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&#34;date&#34;&gt;Oct 06&lt;/th&gt;
    &lt;td&gt;
      &lt;div class=&#34;class-topic&#34;&gt;Privilege separation and least privilege&lt;/div&gt;
      &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/passe.pdf&#34;&gt;Passe&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&#34;date&#34;&gt;Oct 11&lt;/th&gt;
    &lt;td&gt;
      &lt;div class=&#34;class-topic&#34;&gt;Taint tracking and data flow assertions&lt;/div&gt;
      &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/resin.pdf&#34;&gt;Resin&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&#34;date&#34;&gt;Oct 13&lt;/th&gt;
    &lt;td&gt;
      &lt;div class=&#34;class-topic&#34;&gt;Information flow control and policy specification&lt;/div&gt;
      &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/hails.pdf&#34;&gt;Hails&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&#34;date&#34;&gt;Oct 18&lt;/th&gt;
    &lt;td&gt;
      &lt;div class=&#34;class-topic&#34;&gt;Integrity and authenticated data structures&lt;/div&gt;
      &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/verena.pdf&#34;&gt;Verena&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td colspan=&#34;3&#34; class=&#34;topic&#34;&gt;Browser and client-side web security&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&#34;date&#34;&gt;Oct 20&lt;/th&gt;
    &lt;td&gt;
      &lt;div class=&#34;class-topic&#34;&gt;Software-based fault isolation&lt;/div&gt;
      &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/nacl.pdf&#34;&gt;NaCl&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr class=&#34;info&#34;&gt;
    &lt;th class=&#34;date&#34;&gt;Oct 25&lt;/th&gt;
    &lt;td colspan=&#34;2&#34;&gt;Hack time (no class, Deian at PLAS 2016)&lt;/td&gt;
    &lt;!-- &lt;td&gt; --&gt;
    &lt;!--   &lt;div class=&#34;class&amp;#45;topic&#34;&gt;Shim verification&lt;/div&gt; --&gt;
    &lt;!--   &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/quark.pdf&#34;&gt;Quark&lt;/a&gt; --&gt;
    &lt;!-- &lt;/td&gt; --&gt;
    &lt;!-- &lt;td&gt;&lt;/td&gt; --&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&#34;date&#34;&gt;Oct 27&lt;/th&gt;
    &lt;td&gt;
      &lt;div class=&#34;class-topic&#34;&gt;Permissions and privilege separation&lt;/div&gt;
      &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/chrome-extension-system.pdf&#34;&gt;Chrome extension system&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&#34;date&#34;&gt;Nov 01&lt;/th&gt;
    &lt;td&gt;
      &lt;div class=&#34;class-topic&#34;&gt;Label-based mandatory access control&lt;/div&gt;
      &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/cowl.pdf&#34;&gt;COWL&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td colspan=&#34;3&#34; class=&#34;topic&#34;&gt;Operating systems security&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&#34;date&#34;&gt;Nov 03&lt;/th&gt;
    &lt;td&gt;
    &lt;!--   &lt;div class=&#34;class&amp;#45;topic&#34;&gt;Object capability&amp;#45;based microkernel verification&lt;/div&gt; --&gt;
    &lt;!--   seL4 --&gt;
      &lt;div class=&#34;class-topic&#34;&gt;Under-constrained symbolic execution&lt;/div&gt;
      &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/uc-klee.pdf&#34;&gt;UC-KLEE&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&#34;date&#34;&gt;Nov 08&lt;/th&gt;
    &lt;td&gt;
      &lt;div class=&#34;class-topic&#34;&gt;Micro-grammars and static bug checkers&lt;/div&gt;
      &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/uchex.pdf&#34;&gt;&amp;#181;chex&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&#34;date&#34;&gt;Nov 10&lt;/th&gt;
    &lt;td&gt;
      &lt;div class=&#34;class-topic&#34;&gt;Software-isolated processes and manifest-based programs&lt;/div&gt;
      &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/singularity.pdf&#34;&gt;Singularity&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&#34;date&#34;&gt;Nov 15&lt;/th&gt;
    &lt;td&gt;
      &lt;div class=&#34;class-topic&#34;&gt;Full-system verification&lt;/div&gt;
      &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/ironclad-apps.pdf&#34;&gt;Ironclad Apps&lt;/a&gt;
      &lt;!-- See also Verve --&gt;
    &lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td colspan=&#34;3&#34; class=&#34;topic&#34;&gt;Hardware security&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&#34;date&#34;&gt;Nov 17&lt;/th&gt;
    &lt;td&gt;
      &lt;div class=&#34;class-topic&#34;&gt;Type systems for secure hardware development&lt;/div&gt;
      &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/secverilog.pdf&#34;&gt;SecVerilog&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;th class=&#34;date&#34;&gt;Nov 22&lt;/th&gt;
    &lt;td&gt;
      &lt;div class=&#34;class-topic&#34;&gt;Security monitors for tagged hardware&lt;/div&gt;
      &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/micro-policies.pdf&#34;&gt;Micro-policies&lt;/a&gt;
    &lt;/td&gt;
    &lt;td&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr class=&#34;info&#34;&gt;
  &lt;th class=&#34;date&#34;&gt;Nov 24&lt;/th&gt;
  &lt;td colspan=&#34;2&#34;&gt;Thanksgiving break&lt;/td&gt;
&lt;/tr&gt;
  &lt;tr&gt;
    &lt;td colspan=&#34;3&#34; class=&#34;topic&#34;&gt;Cryptography&lt;/td&gt;
  &lt;/tr&gt;
&lt;tr&gt;
  &lt;th class=&#34;date&#34;&gt;Nov 29&lt;/th&gt;
  &lt;td&gt;
      &lt;div class=&#34;class-topic&#34;&gt;Refinement types and verified protocols&lt;/div&gt;
      &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/mitls.pdf&#34;&gt;miTLS&lt;/a&gt;
      &lt;!-- &lt;div class=&#34;class&amp;#45;topic&#34;&gt;Full abstraction and ASLR&lt;/div&gt; --&gt;
      &lt;!-- &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/protection&amp;#45;by&amp;#45;aslr.pdf&#34;&gt;On Protection by Layout Randomization&lt;/a&gt; --&gt;
&lt;!-- Fides --&gt;
&lt;!-- https://lirias.kuleuven.be/bitstream/123456789/474809/1/scoo&amp;#45;j.pdf --&gt;
&lt;!-- See also Haven --&gt;
  &lt;/td&gt;
  &lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;th class=&#34;date&#34;&gt;Dec 01&lt;/th&gt;
  &lt;td&gt;
    &lt;div class=&#34;class-topic&#34;&gt;Domain-specific languages for multi-party computations&lt;/div&gt;
    &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/cse291-fall16/papers/wys*.pdf&#34;&gt;Wys&lt;sup&gt;*&lt;/sup&gt;&lt;/a&gt;
  &lt;/td&gt;
  &lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;info&#34;&gt;
  &lt;th class=&#34;date&#34;&gt;Dec 06&lt;/th&gt;
  &lt;td&gt;Project presentations&lt;/td&gt;
  &lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;info&#34;&gt;
  &lt;th class=&#34;date&#34;&gt;Dec 08&lt;/th&gt;
  &lt;td&gt;Project presentations&lt;/td&gt;
  &lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;
Please note that this syllabus is subject to change.
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSE 291</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse291-fall16/index.html</link>
      <pubDate>Tue, 23 Aug 2016 01:59:45 -0700</pubDate>
      <author>deian&#43;cse291@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse291-fall16/index.html</guid>
      <description>

&lt;p&gt;CSE 291 is a graduate course on language-based systems security.  Most software
we rely upon is plagued by security vulnerabilities&amp;mdash;the common occurrence of
large-scale private data theft alone serves to highlight the magnitude of the
problem. Yet the rise of new application domains and platforms (e.g., crypto
currencies and IoT) is making software ever more integral to daily life.  It
is prudent for us to build more secure software systems.&lt;/p&gt;

&lt;p&gt;One promising approach to building secure systems is to leverage ideas from
programming languages and program analysis. The recent industry trend of
adopting new languages, type systems, and tools&amp;mdash;as exemplified by Mozilla&amp;rsquo;s
&lt;a href=&#34;https://www.rust-lang.org&#34;&gt;Rust&lt;/a&gt; and Facebook&amp;rsquo;s
&lt;a href=&#34;https://flowtype.org/&#34;&gt;Flow&lt;/a&gt;&amp;mdash;also makes this approach very timely.&lt;/p&gt;

&lt;p&gt;This course explores the use of various programming languages and program
analysis methods to &lt;strong&gt;(1)&lt;/strong&gt; enforce security, and &lt;strong&gt;(2)&lt;/strong&gt; to rigorously specify
and reason about security.  We will study recent systems (e.g., operating
systems, web servers, hardware architectures) and the underlying techniques
used to make them secure (e.g., language-level information flow control,
capabilities, symbolic execution, linear type systems).&lt;/p&gt;

&lt;h4 id=&#34;lecture&#34;&gt;Lecture&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Location:&lt;/strong&gt; HSS 1138&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time:&lt;/strong&gt; Tuesdays and Thursdays 5:00-6:20PM&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;instructor&#34;&gt;Instructor&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/&#34;&gt;Deian Stefan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Email:&lt;/strong&gt; &lt;a href=&#34;mailto:deian+cse291@cs.ucsd.edu&#34;&gt;deian+cse291@cs.ucsd.edu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Address:&lt;/strong&gt; CSE 3126&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Office Hours:&lt;/strong&gt; Wed 1:30-2:30 or by appointment&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h4&gt;

&lt;p&gt;While this course is mostly self contained, students should have knowledge of
programming languages (e.g., &lt;a href=&#34;http://www-cse.ucsd.edu/cse130&#34;&gt;CSE 130&lt;/a&gt;),
operating systems (e.g., &lt;a href=&#34;http://www-cse.ucsd.edu/cse120&#34;&gt;CSE 120&lt;/a&gt;), and
security (e.g., &lt;a href=&#34;http://www-cse.ucsd.edu/cse127&#34;&gt;CSE 127&lt;/a&gt;).  We will be reading
research papers on advanced topics with very brief introductions, so students
should be familiar with topics in these areas (e.g., language semantics,
virtual memory management, basic web security).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contact information</title>
      <link>https://cseweb.ucsd.edu/~dstefan/cse291-fall16/contact/</link>
      <pubDate>Tue, 23 Aug 2016 01:59:45 -0700</pubDate>
      <author>deian&#43;cse291@cs.ucsd.edu (Deian Stefan)</author>
      <guid>https://cseweb.ucsd.edu/~dstefan/cse291-fall16/contact/</guid>
      <description>

&lt;p&gt;For general information and questions, please post to the class
&lt;a href=&#34;https://piazza.com/ucsd/fall2016/cse291&#34;&gt;Piazza&lt;/a&gt;.  (It&amp;rsquo;s likely that
other students will have the same question.) We will post
announcements on Piazza (in addition to the course page), so please make
sure to sign up.  For urgent or personal matters matters, please post a
private question or contact the instructor by email.&lt;/p&gt;

&lt;h4 id=&#34;instructor&#34;&gt;Instructor&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name:&lt;/strong&gt; &lt;a href=&#34;https://cseweb.ucsd.edu/~dstefan/&#34;&gt;Deian Stefan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Email:&lt;/strong&gt; &lt;a href=&#34;mailto:deian+cse291@cs.ucsd.edu&#34;&gt;deian+cse291@cs.ucsd.edu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Address:&lt;/strong&gt; CSE 3126&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Office hours:&lt;/strong&gt; Wed 1:30-2:30 or by appointment&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>